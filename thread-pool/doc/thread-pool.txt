线程池(Thread Pool)

参考资料: http://www.cnblogs.com/dolphin0520/p/3932921.html

1) 为什么要使用线程池
如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大
降低系统的效率，因为频繁创建和销毁线程需要时间。
线程复用: 完成一个任务，线程不被销毁，而是可以继续执行其他任务。


1. 线程池状态
    // runState is stored in the high-order bits
    private static final int RUNNING    = -1 << COUNT_BITS;
    private static final int SHUTDOWN   =  0 << COUNT_BITS;
    private static final int STOP       =  1 << COUNT_BITS;
    private static final int TIDYING    =  2 << COUNT_BITS;
    private static final int TERMINATED =  3 << COUNT_BITS;
线程池创建后，处于RUNNING状态，
调用shutdown()方法，线程处于SHUTDOWN状态，此时线程池不能接收新的任务，它会等待所有任务执行完毕。
调用shutdownNow()方法，线程处于STOP状态，  此时线程池不能接收新的任务，
并且会去尝试终止所有正在执行的任务.
当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行完毕，
线程池被设置为TERMINATED状态。 
    

2. 任务的执行
private final BlockingQueue<Runnable> workQueue; 任务缓存队列，用来存放等待执行的任务



3. 线程池中的线程初始化


4. 任务缓存队列和排队策略
在前面我们多次提到了任务缓存队列，即workQueue，它用来存放等待执行的任务。
workQueue的类型为BlockingQueue<Runnable>，通常可以取下面三种类型：
1）ArrayBlockingQueue：基于数组的先进先出队列，此队列创建时必须指定大小；
2）LinkedBlockingQueue：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；
3）synchronousQueue：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。

5. 任务拒绝策略
ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。
ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。
ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）
ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 
6. 线程池的关闭

shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务
shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务

7. 线程池容量的动态调整


























