lock

1. java.util.concurrent.locks.Lock
Lock提供了无条件、可轮询、定时、可中断的锁获取操作，所有加锁和解锁方法都是显式的.

2. java.util.concurrent.locks.ReentrantLock 实现了 Lock接口，和synchronized相比，ReentrantLock为处理
不可用的锁提供了更灵活性.

3.使用Lock接口的规范形式要求在finally块中释放锁lock.unlock(). 如果锁守护线程的代码在try块之外抛出了异常，
它将永远不会释放.

lock提供了比使用synchronized方法和语句可获得的更广泛的锁定操作，此实现允许更灵活的结构，可具有差别
很大的属性，可以支持多个相关的Condition对象.

锁是控制多个线程对共享资源进行访问的工具，通常，锁提供了对共享资源的独占访问.一次只能有一个线程获得锁，
对共享的所有访问都需要首先获得锁.  不过，某些锁可能允许对共享资源并发访问，如ReadWriteLock的读取锁.

synchronized方法和语句的使用提供了与每个对象相关的隐式监视器锁的访问，但却强制所有锁获取和释放均要出现
在一个块结构中: 当获取多个锁时，它们必须以相反的顺序释放，且必须在与所有锁释放时相同的词法范围内使用所有
的锁.
虽然synchronized方法和语句的范围机制使得监视器锁编程方便了许多，而且还帮助避免了很多涉及到锁的常见编程
错误，但有时也需要以更为灵活的方式使用锁，例如 某些遍历并发访问的数据结果的要求使用hand-over-hand 或 
chain locking 获取结点A的锁，然后再获取结点B的锁，然后释放A并获取C，然后释放B并获取D，依次类推.
Lock接口的实现允许锁在不同的操作范围内获取和释放，并允许以任何顺序获取和释放多个锁，从而支持上面的场景.
随着灵活性的增加，也带来了更多的责任，不使用块结构就失去了使用synchronized方法和语句块会出现的锁自动释放
功能.

在大多数情况下，应该使用以下语句：

     Lock lock = ...;
     lock.lock();
     try {
         // access the resource protected by this lock
     } finally {
         lock.unlock();
     }

锁定和取消锁定出现在不同作用范围中时，必须谨慎地确保保持锁定时所执行的所有代码用try-finally或try-catch加以保护，
以确保在必要时释放锁.
































