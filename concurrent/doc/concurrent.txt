JVM并发编程

1.处理器
多核处理器代表了未来真正的发展方向

2.并发编程
在并发编程中，2个或多个动作一般会同时发生.
并发编程的难点: 既要充分利用并发编程带来的性能提升，又要避免同步导致问题的发生.

在一些服务程序、计算密集型、数据分析型应用程序可以较多使用并发编程.

共享不变，隔离可变
我们应该尽可能地提供共享不变性(final)，否则就应该遵循隔离可变性原则，即保证总是只有一个线程可以访问可变变量.

在计算密集型应用中，把子任务均衡负载很重要，这样可以提高整体性能.

3.线程
在JVM中启动多个线程是很容易的，但线程彼此之间的执行顺序却是不可预知的.
线程协调

4.并发模型
1) JDK并发
如果忘记对共享可变状态进行同步或在错误的层级对其进行同步，所得到的结果将是不可预测的.
那些没有对共享可变状态的同步访问进行有效管理的程序本质上都是有问题的.
2) 软件事务内存并发(STM: Software Transaction Memory)
3) 基于角色并发
角色模型可以避免使用共享状态，来达到避免并发的问题.

避免并发问题生产的方法: 在合适的地方进行正确的同步、不共享状态、不改变状态

5.线程安全
同步集合类(synchronized collections Collections.synchronizedList() ...)、并发集合类(ConcurrentHashMap ...)

6.并发性能

7.进程
程序在运行中，其所属的进程中至少存在一个执行线程. 我们可以通过创建线程的方式来启动新的执行流程以达到并发
执行多个任务的效果.

8.分而治之
为了加快程序处理速度，我们需要将问题分解成若干个并发执行的任务. 创建任务，将其委派给线程，以便使它们可以并发
地执行.
确定线程数: 一般可以创建线程数量最小为可用的处理器核数，如果所有的任务都是计算密集型的，则创建线程数为处理器可以用
核数即可，太多反而会降低效率。因为当有多个任务处于就绪状态时，处理器核心需要在线程间频繁进行上下文切换，而这种
切换对程序性能损耗较大. 
如果任务都是IO密集型的，那就需要创建更多线程来提高性能；当一个任务执行IO操作时，其线程将被堵塞，于是处理器可以
立即进行上下文切换以便处理其他就绪线程. 如果任务有50%的时间处于阻塞状态，则程序所需线程数是处理器可用核心树的2
倍.
线程数=CPU可用核心数/(1 - 阻塞系数)，阻塞系数在[0, 1]之间，IO密集型任务的阻塞系数接近1，计算密集型阻塞系数为0.
为了更好确定程序所需线程数，我们需要知道 处理器可用核心数和任务的阻塞系数.
处理可用核心数可以通过 Runtime.getRuntime().availableProcessors() 来获取，而阻塞系数就需要通过猜测尝试来确定，
可以通过性能分析工具或java.lang.management API来确定线程花在系统IO操作上的时间与CPU密集型任务所耗的时间比值.

9.确定任务的数量
在任务处理耗时均匀的情况下，可以分配一个线程去处理一个任务，用任务的总数除以线程数则可以得出每个线程需要处理的
任务数.
如果每个任务处理耗时不均匀，则应该根据任务处理的难度和耗时去分配线程数量，耗时长的应该多分配线程，这样处理器执行
就比较均匀. 因此我们需要恰当分解任务，以便使子任务的负载保持均匀分布. 但是分解任务相对比较复杂，我们可以通过不让
处理器闲置下来的方式提高处理器的利用率，就是将任务拆得比线程数多，让处理器一直不停下来工作.

10.线程池

11.线程阻塞
在线程池中，一部分线程在等待其他线程的执行结果，而这些其他线程却没有执行机会，一直处在等待队列，这样，当线程池
中线程被分配完毕之后，就会造成死锁(线程池诱发型死锁)


12.软件事务内存(STM)
原子性: 执行的独立性
一致性: 变化的结果、完整性
隔离性: 可见性








































